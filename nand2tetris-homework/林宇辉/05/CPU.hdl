// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM outp9out, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    Or16    ( a=instruction, b=false, out[15]=i, out[0]=j3, out[1]=j2, out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, out[12]=a );
    Or16    ( a = inM, b = false, out = M );
    Mux16   ( a = instruction, b = ddA, sel = i, out = dA );    
    ARegister( in = dA, load = true, out = A );
    Mux16   ( a = A, b = M, sel = a,out = AM );
    ALU     ( x = D , y = AM, zx = c1, nx = c2, zy = c3, ny = c4, f = c5, no  = c6, out = ALU-out, out = outM, zr = zr, ng = ng );
    And     ( a = i , b = d3 , out = d-write );
    Mux     ( a = false, b = true, sel = d-write, out = writeM );
    And     ( a = i , b = d2 , out = dd );
    DRegister( in = ALU-out, load = dd, out = D );
    Mux16   ( a = A, b = ALU-out, sel = d1, out = ddA );
    Or16    ( a = A, b = false, out[0..14] = addressM );
    Or      ( a = zr, b = ng, out = npt );
    Not     ( in = npt , out = pt );
    And     ( a = j1, b = ng, out = jmp1 );
    And     ( a = j2, b = zr, out = jmp2 );
    And     ( a = j3, b = pt, out = jmp3 );
    Or8Way  ( in[0] = jmp1, in[1] = jmp2, in[2] = jmp3, in[3..7] = false, out = jmpa );
    And     ( a = jmpa, b = i, out = jump );
    Inc16   ( in = PC-out , out = dPC );
    Mux16   ( a = dPC, b = A, sel = jump, out = PC-dest-a );
    PC      ( in = A , load = jump , inc = true , reset = reset , out = PC-out );
    Or16    ( a = PC-out , b = false, out[0..14] = pc );

}