// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Or16( a[0..14] = address , a[15] = false , b = false , out[0..13] = addr1 , out[0..12] = addr2 , out[14] = flag1 , out[13] = nflag2 , out[13..14] = flag );
    Mux ( a = load , b = false , sel = flag1 , out = load1 );
    Not ( in = nflag2 , out = flag2 );
    And ( a = flag1 , b = flag2 , out = flag3 );
    Mux ( a = false , b = load , sel = flag3 , out = load2 );
    RAM16K ( in = in , load = load1 , address = addr1 , out = oot1 );
    Screen ( in = in , load = load2 , address = addr2 , out = oot2 );
    Keyboard ( out = oot3 );
    Mux4Way16( a = oot1 , b = oot1 , c = oot2 , d = oot3 , sel = flag , out = out );
}