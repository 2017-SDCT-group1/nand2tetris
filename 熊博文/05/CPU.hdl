// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15],b=instruction[0],out=saveIn0);  
    And(a=instruction[15],b=instruction[1],out=saveIn1);  
    And(a=instruction[15],b=instruction[2],out=saveIn2);  
    And(a=instruction[15],b=instruction[3],out=saveIn3);  
    And(a=instruction[15],b=instruction[4],out=saveIn4);  
    And(a=instruction[15],b=instruction[5],out=saveIn5);  
    And(a=instruction[15],b=instruction[15],out=saveIn15);  
    Xor(a=instruction[15],b=true,out=write1);  
    And(a=saveIn15,b=saveIn5,out=write2);  
    Or(a=write1,b=write2,out=write);  
  
    And(a=instruction[15],b=instruction[12],out=saveIn12);  
  
  
    Mux16(a=instruction,b=ooutM,sel=saveIn5,out=toA);  
    ARegister(in=toA,load=write,out=outA);  
    Mux16(a=outA,b=inM,sel=saveIn12,out=alu1);  
    DRegister(in=ooutM,load=saveIn4,out=alu2);  
  
    ALU(x=alu2,y=alu1,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6],out=ooutM,zr=zr,ng=ng);  
  
    And(a=zr,b=saveIn1,out=load1);  
    And(a=ng,b=saveIn2,out=load2);  
    Not(in=ng,out=Nng);  
    Not(in=zr,out=Nzr);  
    And(a=Nng,b=Nzr,out=ifload);  
    And(a=ifload,b=saveIn0,out=load3);  
    Or(a=load1,b=load2,out=load4);  
    Or(a=load3,b=load4,out=load);  
  
    PC(in=outA,load=load,inc=true,reset=reset,out[0..14]=pc);  
    And16(a=outA,b[0..15]=true,out[0..14]=addressM);  
  
    And(a=instruction[15],b=saveIn3,out=writeM);  
  
    And16(a=ooutM,b[0..15]=true,out=outM);  
}