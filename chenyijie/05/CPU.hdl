// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//A指令 instruction[15] = 0, C指令 instruction[15] = 1
	//A: 将 instruction[0..14]写入寄存器A中
	//C：1 1 1 a   c1 c2 c3 c4   c5 c6 d1 d2    d3 j1 j2 j3
	//c1 c2 c3 c4 c5 c6 直接对应ALU的6个接口
	
	//d1 d2 d3 代表存入的目的地
	//j1 j2 j3 代表跳转的判断
	
	/*************指令区分和A寄存器*************/
	Mux(a = true , b = false, sel = instruction[15], out = Ainstr);
	
	Mux(a = false , b = true, sel = instruction[15], out = Cinstr);
	//区分AC指令
	
	And(a = Cinstr, b = instruction[5], out = ALUtoA);
	//d1 = 1 时ALU的结果目的地含有A
	
	Mux16(a = instruction, b = ALUout, sel = ALUtoA, out = Muxout1);
	//如果是A指令，也写入A
	
	Or(a = Ainstr, b = ALUtoA, out = REGAload);
	
	ARegister(in = Muxout1, load = REGAload, out = REGAout);
	/************A寄存器部分完成************/
	
	/**************D寄存器部分**************/
	//C指令的d2 = 1 时， ALU的输出目的地含有D寄存器
	And(a = Cinstr, b = instruction[4], out = ALUtoD);
	
	DRegister(in = ALUout,load = ALUtoD,out = REGDout);
	/***********D寄存器部分完成*************/
	
	/**************ALU处理部分**************/
	//a = 0 时 输入 寄存器 A 和 D
	//a = 1 时 输入 寄存器 D 和 M
	//a 为 instruction[12]
	
	Mux16(a = REGAout, b = inM, sel = instruction[12], out = ALUin);
	//完成AM指令选择
	
	ALU(x = REGDout, y = ALUin, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, out = outM, zr = zr, ng = ng);
	/*************ALU部分完成**************/
	
	/************处理输出的addresM*********/
	And16(a = true, b = REGAout, out[0..14] = addressM);
	/************输出的addresM完成*********/
	
	/************处理是否写入M存储器*******/
	//d3 = 1 时ALU的结果目的地含有M
	And(a = Cinstr, b = instruction[3], out = writeM);	
	/***************完成*****************/
	
	/*************PC部分***************/
	//如果没有跳转即j1 j2 j3 =0，那么PC只需+1
	Or(a = instruction[0], b = instruction[1], out = temp);
	Or(a = temp, b = instruction[2], out = temp2);
	And(a = temp2, b = Cinstr, out = jump);
	
	
	//跳转指令说明
	//利用zr 和 ng 判断跳转条件 zr（ALUout == 0） ng(ALUout < 0)
	//j1控制结果<0时跳转，j2控制结果为0时跳转，j3控制结果>0时跳转
	Not(in = ng, out = pr1);
	Not(in = zr, out = nzr);
	And(a = nzr, b = pr1, out = pr);
	//pr代表结果为正
	And(a = instruction[0], b = pr, out = jumpPR);//即JGT
	And(a = instruction[1], b = zr, out = jumpZR);//即JEQ
	And(a = instruction[2], b = ng, out = jumpNR);//即JLT
	
	//将三者Or最终判断是否跳转
	Or(a = jumpPR, b = jumpNR, out = tempjump);
	Or(a = tempjump, b = jumpZR, out = PCjump1);
	And(a = jump, b = PCjump1, out = PCjump);
	Not(in = PCjump, out = NOTjump);
	//判断是不是没有跳转
	
	Mux(a = false, b = true, sel = NOTjump, out = PCinc);
	//没有跳转就让PC+1
	PC(in = REGAout, load = PCjump, inc = PCinc, reset = reset, out[0..14] = pc);
	
	
 }